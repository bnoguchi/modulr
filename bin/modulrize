#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../lib/modulr'
require 'optparse'

options = {
  :output => STDOUT
}

opts = OptionParser.new do |opts|
  opts.banner = 'Usage: modulrize program.js [options] > output.js'
  
  opts.separator ''
  opts.separator 'Options:'
  
  opts.on('-o', '--output=FILE', 'Write the output to FILE. Defaults to stdout.') do |output|
    options[:output] = File.open(output, 'w')
  end
  
  opts.on('-r', '--root=DIR', 'Set DIR as root directory. Defaults to the directory containing FILE.') do |root|
    options[:root] = root
  end
  
  opts.on('--lazy-eval [MODULES]', Array,
    'Enable lazy evaluation of all JS modules or of those specified by MODULES.',
    'MODULES accepts a comma-separated list of identifiers.') do |modules|
    modules = true unless modules
    options[:lazy_eval] = modules
  end
  
  opts.on('--minify', 'Minify output using YUI Compressor.') do |minify|
    options[:minify] = minify
  end
  
  opts.on('--global-export=GLOBAL_VAR', 'Export main module\'s exports to the GLOBAL_VAR global variable.') do |global|
    options[:global] = global
  end
  
  opts.on('-h', '--help', 'Show this message.') do
    puts opts
    exit
  end
  
  opts.separator ''
  opts.separator 'Minification options (these are forwarded to YUI Compressor without the "minify-" prefix):'
  
  {
    'line-break COLUMN'     => 'Insert a line break after the specified column number.',
    'verbose'               => 'Display informational messages and warnings.',
    'nomunge'               => 'Minify only, do not obfuscate.',
    'preserve-semi'         => 'Preserve all semicolons.',
    'disable-optimizations' => 'Disable all micro optimizations.'
  }.each do |option, message|
    prefixed_option = option.sub(/\A(\[no-\])?/, '--\\1minify-')
    
    def normalize_option(option)
      option.gsub('-', '_').to_sym
    end
    
    opts.on(prefixed_option, message) do |value|
      if !options[:minify] || options[:minify] == true
        options[:minify] = {}
      end
      options[:minify][normalize_option(option)] = value
    end
  end

end

opts.parse!

output = options.delete(:output)

begin
  if ARGV.size != 1
    puts opts
    exit 1
  end
  result = Modulr.ize(ARGV.first, options)
  output.print(result)
ensure
  output.close
end
